[
  {
    "id": 41,
    "question": "In Dart, what does `?..` mean?",
    "options": ["Null-aware spread", "Null-aware method call with result", "Null-aware method call ignoring result", "Null-safe casting"],
    "answer": 2
  },
  {
    "id": 42,
    "question": "What is the Dart equivalent of C#'s `var` for type inference?",
    "options": ["var", "dynamic", "auto", "final"],
    "answer": 0
  },
  {
    "id": 43,
    "question": "Which Dart keyword prevents reassignment but allows delayed initialization?",
    "options": ["final", "const", "late", "static"],
    "answer": 2
  },
  {
    "id": 44,
    "question": "How does Dart handle private class members?",
    "options": ["`private` keyword", "`_` prefix", "`@private` annotation", "Encapsulation is not supported"],
    "answer": 1
  },
  {
    "id": 45,
    "question": "Which Dart feature allows extending functionality without inheritance?",
    "options": ["Interfaces", "Mixins", "Extensions", "Prototypes"],
    "answer": 2
  },
  {
    "id": 46,
    "question": "Which of the following Dart features has no direct C# equivalent?",
    "options": ["Extension methods", "Null-aware spread operator", "LINQ", "Properties"],
    "answer": 1
  },
  {
    "id": 47,
    "question": "Which keyword is used in Dart to reuse a class’s methods without inheriting?",
    "options": ["include", "mixin", "interface", "with"],
    "answer": 3
  },
  {
    "id": 48,
    "question": "What happens if a Dart file omits the `main()` function?",
    "options": ["It fails to compile", "It runs but throws", "It compiles but doesn't execute", "It runs as a library"],
    "answer": 3
  },
  {
    "id": 49,
    "question": "Which Dart feature replaces C#’s `using` directive?",
    "options": ["import", "include", "use", "require"],
    "answer": 0
  },
  {
    "id": 50,
    "question": "How does Dart define default values for named parameters?",
    "options": ["param: 'default'", "param = 'default'", "param = default", "param: default"],
    "answer": 1
  },
  {
    "id": 51,
    "question": "What is a Dart `typedef` used for?",
    "options": ["Create type aliases for values", "Create enum constants", "Define function signatures", "Mark abstract methods"],
    "answer": 2
  },
  {
    "id": 52,
    "question": "How does Dart enforce immutability in a class?",
    "options": ["@immutable annotation", "const constructor", "Making all fields final", "All of the above"],
    "answer": 3
  },
  {
    "id": 53,
    "question": "What is special about Dart’s `enum` type compared to C#?",
    "options": ["Enums are string-based", "Enums can't have values", "Enums can have methods and fields", "Enums must implement interfaces"],
    "answer": 2
  },
  {
    "id": 54,
    "question": "Which is **true** about Dart’s `dynamic` type?",
    "options": ["It's type-safe", "It disables type checking", "It is only used for JSON", "It replaces `Object`"],
    "answer": 1
  },
  {
    "id": 55,
    "question": "How are Dart extensions declared?",
    "options": ["extend ClassName {}", "extension on ClassName {}", "extension ClassName on Type {}", "mixin Extension with ClassName"],
    "answer": 2
  },
  {
    "id": 56,
    "question": "What is the correct syntax to create a Dart list with a conditional element?",
    "options": ["[if (flag) 1]", "[1 if flag]", "[flag ? 1 : null]", "[flag => 1]"],
    "answer": 0
  },
  {
    "id": 57,
    "question": "How does Dart handle integer division?",
    "options": ["/", "~/", "//", "int.div()"],
    "answer": 1
  },
  {
    "id": 58,
    "question": "In Dart, `T?` means:",
    "options": ["Nullable type", "Template type", "Constant type", "Type constraint"],
    "answer": 0
  },
  {
    "id": 59,
    "question": "How do you mark a required named parameter in Dart (post-null-safety)?",
    "options": ["required", "@Required", "assert(param != null)", "use const"],
    "answer": 0
  },
  {
    "id": 60,
    "question": "Which of these is NOT a valid use of Dart's `spread` operator?",
    "options": ["[...list]", "{...map}", "[1, ...null]", "[...[]]"],
    "answer": 2
  },
  {
    "id": 61,
    "question": "Which of the following is **not** a Dart operator?",
    "options": ["=>", "??", "~=", "~>"],
    "answer": 3
  },
  {
    "id": 62,
    "question": "How does Dart enforce null safety at compile time?",
    "options": ["Through runtime checks", "By static analysis", "Through asserts", "By requiring JSON decoding"],
    "answer": 1
  },
  {
    "id": 63,
    "question": "What’s the Dart equivalent to C#’s `?.` (null-conditional access)?",
    "options": ["?.", "!!", "::", "&&"],
    "answer": 0
  },
  {
    "id": 64,
    "question": "In Dart, which combination allows you to define a constant list?",
    "options": ["final List", "var list = []", "const List", "const []"],
    "answer": 3
  },
  {
    "id": 65,
    "question": "How do Dart constructors differ from C# constructors?",
    "options": ["Dart allows named constructors", "Dart constructors can't be overloaded", "Dart doesn't support constructors", "They are async by default"],
    "answer": 0
  },
  {
    "id": 66,
    "question": "Which Dart keyword is used to initialize fields before the constructor body runs?",
    "options": ["init", "super", "this", "initializer list"],
    "answer": 3
  },
  {
    "id": 67,
    "question": "What does `FutureOr<T>` mean in Dart?",
    "options": ["T or void", "Future or T", "Async or sync list", "Future<void>"],
    "answer": 1
  },
  {
    "id": 68,
    "question": "How are Dart libraries typically organized?",
    "options": ["Packages using `pubspec.yaml`", "DLL files", "Namespaces", "Assemblies"],
    "answer": 0
  },
  {
    "id": 69,
    "question": "What is the difference between `Object` and `dynamic` in Dart?",
    "options": ["Object is compile-checked, dynamic is not", "They are aliases", "Object has no methods", "Dynamic is a subtype of Object"],
    "answer": 0
  },
  {
    "id": 70,
    "question": "What’s unique about Dart’s `main()` function compared to C#?",
    "options": ["It can return void or Future<void>", "It must be async", "It has no arguments", "It must return int"],
    "answer": 0
  },
  {
    "id": 71,
    "question": "Which syntax is used for a redirecting constructor in Dart?",
    "options": ["this.constructor()", "constructor() => this()", "MyClass.name() : this()", "this.name() = MyClass()"],
    "answer": 2
  },
  {
    "id": 72,
    "question": "How does Dart support optional positional parameters?",
    "options": ["(a, b = 2)", "(a, [b])", "{a, b}", "(optional b)"],
    "answer": 1
  },
  {
    "id": 73,
    "question": "Which Dart keyword allows you to create a compile-time constant object?",
    "options": ["const", "static", "final", "immutable"],
    "answer": 0
  },
  {
    "id": 74,
    "question": "Dart’s `late` keyword is used to:",
    "options": ["Force null assignment", "Defer initialization until used", "Initialize in constructor only", "Create compile-time constants"],
    "answer": 1
  },
  {
    "id": 75,
    "question": "Which keyword allows implementing multiple interfaces in Dart?",
    "options": ["implements", "extends", "inherits", "with"],
    "answer": 0
  },
  {
    "id": 76,
    "question": "What does `as` do in Dart?",
    "options": ["Casts a value to a specific type", "Defines a mixin", "Assigns a new alias", "Compares references"],
    "answer": 0
  },
  {
    "id": 77,
    "question": "What does the `...` operator do in a Dart list?",
    "options": ["Unpacks another list", "Declares spread list", "Joins lists", "Filters nulls"],
    "answer": 0
  },
  {
    "id": 78,
    "question": "How do you define an unmodifiable map in Dart?",
    "options": ["Map.unmodifiable({})", "const {}", "final {}", "Map.freeze({})"],
    "answer": 0
  },
  {
    "id": 79,
    "question": "Which construct enables extension methods in Dart?",
    "options": ["extension", "mixin", "with", "augment"],
    "answer": 0
  },
  {
    "id": 80,
    "question": "How does Dart treat uninitialized variables with no `late`, `final`, or `const`?",
    "options": ["Assigns null", "Throws error", "Assigns default type", "Requires value"],
    "answer": 0
  }
]

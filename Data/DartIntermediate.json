[
    {
      "id": 1,
      "question": "What does the `!` operator mean in Dart?",
      "options": ["Negation", "Non-null assertion", "Bitwise NOT", "Null-coalescing"],
      "answer": 1
    },
    {
      "id": 2,
      "question": "Which keyword is used to define an abstract class in Dart?",
      "options": ["virtual", "interface", "abstract", "base"],
      "answer": 2
    },
    {
      "id": 3,
      "question": "What does the `async` keyword do?",
      "options": ["Defines an asynchronous function", "Declares a stream", "Delays execution", "Executes code in parallel"],
      "answer": 0
    },
    {
      "id": 4,
      "question": "How do you handle an exception in Dart?",
      "options": ["try/catch", "catch/throw", "try/except", "rescue/end"],
      "answer": 0
    },
    {
      "id": 5,
      "question": "Which symbol is used for the null-aware operator in Dart?",
      "options": ["??", "!?=", "::", "!!"],
      "answer": 0
    },
    {
      "id": 6,
      "question": "What is the output type of an async function?",
      "options": ["void", "Stream", "Future", "int"],
      "answer": 2
    },
    {
      "id": 7,
      "question": "How do you make a function return a future of int?",
      "options": ["Future<int> func()", "int async func()", "async<int> func()", "int => Future func()"],
      "answer": 0
    },
    {
      "id": 8,
      "question": "Which keyword is used to create an immutable variable thatâ€™s initialized later?",
      "options": ["const", "var", "late final", "final const"],
      "answer": 2
    },
    {
      "id": 9,
      "question": "Which of the following is a correct use of mixins in Dart?",
      "options": ["with MixinClass", "include MixinClass", "extends MixinClass", "mixin MixinClass"],
      "answer": 0
    },
    {
      "id": 10,
      "question": "What is the purpose of `yield` in Dart?",
      "options": ["Breaks from a loop", "Pauses async function", "Returns from a stream generator", "Continues execution"],
      "answer": 2
    },
    {
      "id": 11,
      "question": "Which keyword is used to declare a stream-producing function?",
      "options": ["stream", "async", "sync*", "async*"],
      "answer": 3
    },
    {
      "id": 12,
      "question": "How do you create a custom exception in Dart?",
      "options": ["Throw a class that implements Exception", "Use throw new Error()", "Throw a string", "You cannot"],
      "answer": 0
    },
    {
      "id": 13,
      "question": "What does `required` do in function parameters?",
      "options": ["Marks positional arguments", "Marks parameters as optional", "Marks parameters that must be provided", "Ignores null safety"],
      "answer": 2
    },
    {
      "id": 14,
      "question": "How do you declare an optional named parameter?",
      "options": ["(String name?)", "{String? name}", "[String name]", "name?: String"],
      "answer": 1
    },
    {
      "id": 15,
      "question": "What is the difference between `final` and `const` in Dart?",
      "options": ["final is compile-time, const is runtime", "final is runtime, const is compile-time", "No difference", "const is mutable"],
      "answer": 1
    },
    {
      "id": 16,
      "question": "What is the use of the `cascade` operator (`..`) in Dart?",
      "options": ["Multiple method calls on the same object", "Chaining arithmetic", "Error handling", "None of the above"],
      "answer": 0
    },
    {
      "id": 17,
      "question": "How do you define an unnamed constructor in a class?",
      "options": ["constructor()", "ClassName()", "this()", "init()"],
      "answer": 1
    },
    {
      "id": 18,
      "question": "Which constructor allows initialization before body execution?",
      "options": ["Initial", "Redirecting", "Initializer list", "Factory"],
      "answer": 2
    },
    {
      "id": 19,
      "question": "What is the purpose of a `factory` constructor?",
      "options": ["Creates multiple instances", "Returns an existing or cached instance", "Is always async", "Only for abstract classes"],
      "answer": 1
    },
    {
      "id": 20,
      "question": "What does the `?.` operator do?",
      "options": ["Force unwraps", "Null-checks before method call", "Throws exception", "Shortens expression"],
      "answer": 1
    },
    {
      "id": 21,
      "question": "Which of these is a valid getter syntax in Dart?",
      "options": ["get name => _name;", "getter name = _name;", "get name() = _name;", "name.get => _name;"],
      "answer": 0
    },
    {
      "id": 22,
      "question": "What will `null ?? 'default'` return?",
      "options": ["null", "default", "error", "undefined"],
      "answer": 1
    },
    {
      "id": 23,
      "question": "Which Dart class is the base class of all classes?",
      "options": ["Base", "Object", "Any", "Super"],
      "answer": 1
    },
    {
      "id": 24,
      "question": "What does `List.unmodifiable()` do?",
      "options": ["Returns a fixed-size list", "Creates a mutable list", "Creates a list that cannot be changed", "Sorts the list"],
      "answer": 2
    },
    {
      "id": 25,
      "question": "What is the output of `print([1, 2, ...[3, 4]])`?",
      "options": ["[1, 2, [3, 4]]", "[1, 2, 3, 4]", "Error", "[1, 2, ...[3, 4]]"],
      "answer": 1
    },
    {
      "id": 26,
      "question": "What does `late` keyword signify?",
      "options": ["Optional initialization", "Lazy initialization", "Early initialization", "Thread-safe variable"],
      "answer": 1
    },
    {
      "id": 27,
      "question": "Which keyword is used for creating an enum?",
      "options": ["enum", "enumeration", "type", "choice"],
      "answer": 0
    },
    {
      "id": 28,
      "question": "Which of these is the correct syntax for a generic class?",
      "options": ["class MyClass<Type> {}", "generic MyClass<T> {}", "MyClass<T> {}", "class<T> MyClass {}"],
      "answer": 0
    },
    {
      "id": 29,
      "question": "How do you restrict a generic type to a class?",
      "options": ["<T : MyClass>", "<T extends MyClass>", "<T implements MyClass>", "<T super MyClass>"],
      "answer": 1
    },
    {
      "id": 30,
      "question": "What is the use of assert() in Dart?",
      "options": ["Log values", "Throw runtime exceptions", "Check for conditions in development", "Terminate the program"],
      "answer": 2
    },
    {
      "id": 31,
      "question": "Which library provides DateTime utilities?",
      "options": ["dart:core", "dart:date", "dart:utils", "dart:time"],
      "answer": 0
    },
    {
      "id": 32,
      "question": "How do you create a stream?",
      "options": ["Stream()", "Stream.fromIterable()", "new stream()", "AsyncStream()"],
      "answer": 1
    },
    {
      "id": 33,
      "question": "Which method listens to a stream?",
      "options": ["subscribe()", "onData()", "listen()", "stream()"],
      "answer": 2
    },
    {
      "id": 34,
      "question": "What is the return type of `main()` in an async Dart program?",
      "options": ["void", "Future", "Future<void>", "async"],
      "answer": 2
    },
    {
      "id": 35,
      "question": "How do you ignore exceptions intentionally?",
      "options": ["Empty catch block", "try without catch", "try-finally", "You can't"],
      "answer": 0
    },
    {
      "id": 36,
      "question": "Which operator prevents execution when a value is null?",
      "options": ["!", "?.", "??", "=>"],
      "answer": 1
    },
    {
      "id": 37,
      "question": "What is the Dart equivalent of JavaScript's `map()` method for lists?",
      "options": [".forEach()", ".map()", ".transform()", ".apply()"],
      "answer": 1
    },
    {
      "id": 38,
      "question": "Which syntax is used for a lambda (arrow) function in Dart?",
      "options": ["()=>", "->", "::", "=>"],
      "answer": 3
    },
    {
      "id": 39,
      "question": "What does `is` do in Dart?",
      "options": ["Checks if two objects are identical", "Checks type at runtime", "Declares variable type", "Creates instance"],
      "answer": 1
    },
    {
      "id": 40,
      "question": "Which statement correctly uses a spread operator?",
      "options": ["list.add(...other);", "[1, ...otherList]", "[...1,2]", "list = other...;"],
      "answer": 1
    }
]
  